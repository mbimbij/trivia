openapi: 3.0.1
info:
  title: OpenAPI definition
  version: v0
servers:
- url: http://localhost:8080
  description: Generated server url
paths:
  /api/games:
    get:
      tags:
      - trivia-controller
      operationId: listGames
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GameResponseDto'
    post:
      tags:
      - trivia-controller
      operationId: createGame
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateGameRequestDto'
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GameResponseDto'
  /api/games/{gameId}:
    get:
      tags:
        - trivia-controller
      summary: get a game by its id
      operationId: getGameById
      parameters:
        - name: gameId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "404":
          description: game not found
          content:
            application/problem+json:
              example:
                type: about:blank
                title: Not Found
                status: 404
                instance: /games/777
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GameResponseDto'
    delete:
      tags:
        - trivia-controller
      operationId: deleteGameById
      parameters:
        - name: gameId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "204":
          description: No Content
  /api/games/{gameId}/players/{playerId}/join:
    post:
      tags:
      - trivia-controller
      operationId: addPlayerToGame
      parameters:
      - name: gameId
        in: path
        required: true
        schema:
          type: integer
          format: int32
      - name: playerId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDto'
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GameResponseDto'
  /api/games/{gameId}/players/{playerId}/start:
    post:
      tags:
      - trivia-controller
      operationId: startGame
      parameters:
      - name: gameId
        in: path
        required: true
        schema:
          type: integer
          format: int32
      - name: playerId
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GameResponseDto'
  /api/games/{gameId}/players/{playerId}/rollDice:
    post:
      tags:
        - trivia-controller
      operationId: rollDice
      parameters:
        - name: gameId
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - name: playerId
          in: path
          required: true
          schema:
            type: string
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GameResponseDto"
            application/problem+json:
              schema:
                $ref: "#/components/schemas/GameResponseDto"
  /api/games/{gameId}/players/{playerId}/drawQuestion:
    post:
      tags:
        - trivia-controller
      operationId: drawQuestion
      parameters:
        - name: gameId
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - name: playerId
          in: path
          required: true
          schema:
            type: string
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GameResponseDto"
            application/problem+json:
              schema:
                $ref: "#/components/schemas/GameResponseDto"
  /api/games/{gameId}/logs:
    get:
      tags:
        - trivia-controller
      operationId: getGameLogs
      parameters:
        - name: gameId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GameLog'
  /api/games/{gameId}/players/{playerId}/validate:
    post:
      tags:
        - trivia-controller
      operationId: validate
      parameters:
        - name: gameId
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - name: playerId
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: No Content
  /api/games/{gameId}/players/{playerId}/answer/{answerCode}:
    post:
      tags:
        - trivia-controller
      operationId: answer
      parameters:
        - name: gameId
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - name: playerId
          in: path
          required: true
          schema:
            type: string
        - name: answerCode
          in: path
          required: true
          schema:
            type: string
            enum:
              - A
              - B
              - C
              - D
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnswerDto"
            application/problem+json:
              schema:
                $ref: "#/components/schemas/AnswerDto"
components:
  schemas:
    CreateGameRequestDto:
      type: object
      properties:
        gameName:
          type: string
        creator:
          $ref: '#/components/schemas/UserDto'
      required:
        - gameName
        - creator
    UserDto:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
      required:
        - id
        - name
    GameResponseDto:
      required:
        - creator
        - currentPlayer
        - id
        - name
        - players
        - state
        - turn
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
        state:
          type: string
        turn:
          type: integer
          format: int32
        creator:
          $ref: "#/components/schemas/PlayerDto"
        players:
          type: array
          items:
            $ref: "#/components/schemas/PlayerDto"
        currentPlayer:
          $ref: "#/components/schemas/PlayerDto"
        winner:
          $ref: "#/components/schemas/PlayerDto"
        currentQuestion:
          $ref: "#/components/schemas/QuestionDto"
        currentRoll:
          type: integer
          format: int32
        currentAnswer:
          $ref: "#/components/schemas/AnswerDto"
    GameLog:
      type: object
      properties:
        gameId:
          type: integer
          format: int32
        value:
          type: string
      required:
        - gameId
        - value
    PlayerDto:
      required:
        - coinCount
        - consecutiveIncorrectAnswersCount
        - id
        - isInPenaltyBox
        - name
        - state
        - location
        - gotOutOfPenaltyBox
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        coinCount:
          type: integer
          format: int32
        isInPenaltyBox:
          type: boolean
        consecutiveIncorrectAnswersCount:
          type: integer
          format: int32
        state:
          type: string
        location:
          type: integer
          format: int32
        gotOutOfPenaltyBox:
          type: boolean
    QuestionDto:
      required:
        - availableAnswers
        - id
        - questionText
      type: object
      properties:
        id:
          type: string
        questionText:
          type: string
        availableAnswers:
          type: object
          additionalProperties:
            type: string
    AnswerCode:
      type: string
      enum:
        - A
        - B
        - C
        - D
    AnswerDto:
      type: object
      properties:
        isCorrect:
          type: boolean
        explanations:
          type: string